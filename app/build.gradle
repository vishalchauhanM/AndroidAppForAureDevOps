plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    def result = "git rev-list HEAD --count".execute().text.trim().toInteger() //unix
    if(result.empty) result = "PowerShell -Command git rev-list HEAD --count".execute().text.trim().toInteger() //windows
    if(result.empty) throw new RuntimeException("Could not generate versioncode on this platform? Cmd output: ${result.text}")
    def versionMajor = 1
    def versionMinor = 0
    def versionPatch = result
    def versionNumber = (versionMajor * 100000) + (versionMinor * 10000) + versionPatch

        defaultConfig {
            applicationId "com.example.androidappforazuredevops"
            minSdkVersion 16
            targetSdkVersion 30
            versionCode versionNumber
            versionName "v${versionMajor}.${versionMinor}.${versionPatch}"

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }


    buildTypes {
        debug {
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                project.ext { appName = 'AndroidAppForAzureDevOps' }
                def newName = output.outputFile.name
                newName = newName.replace("app-", "$project.ext.appName-")
                output.outputFileName = new File(newName)
            }
            variant.resValue "string", "appVersionName", variant.versionName
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def increaseBuildVersion() {
    def versionPropsFile = file("${project.rootDir}\\version.properties")
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def counter = 0
        def runTasks = gradle.startParameter.taskNames
        if (runTasks.join(",").contains('assembleRelease')) {
            counter = 1
        }

        def versionMinor = versionProps['VERSION_MINOR'].toInteger() + counter
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + 1
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + 1

        versionProps['VERSION_MINOR'] = versionMinor.toString()
        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()
        println("v1.${versionMinor}.${versionPatch}")
        versionProps.store(versionPropsFile.newWriter(), null)
    }
}

    task incrementBuildVersion {
        println("Incrementing the Version Code")
        increaseBuildVersion()
    }

    dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}